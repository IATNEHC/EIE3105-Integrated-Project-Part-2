
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000100  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000038  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000f9  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000076  00000000  00000000  000002b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000010e  00000000  00000000  0000032b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000054  00000000  00000000  0000043c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000147  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000028  00000000  00000000  000005d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  78:	0c 94 7e 00 	jmp	0xfc	; 0xfc <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <Timer0init>:
#include <avr/io.h>
#include <avr/interrupt.h>

void Timer0init(void)
{
	TCCR0A = (1 << COM0A1) | (0 << COM0A0) | (1 << COM0B1) | (0 << COM0B0) | (1 << WGM01) | (1 << WGM00);			//Timer 0 PWM
  80:	83 ea       	ldi	r24, 0xA3	; 163
  82:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1 << WGM02) | (1 << CS02) | (0 << CS01) | (0 << CS00);
  84:	8c e0       	ldi	r24, 0x0C	; 12
  86:	85 bd       	out	0x25, r24	; 37
	OCR0A = 124;
  88:	8c e7       	ldi	r24, 0x7C	; 124
  8a:	87 bd       	out	0x27, r24	; 39
  8c:	08 95       	ret

0000008e <Timer2init>:
}

void Timer2init(void)
{
	TCCR2A = (1 << COM2A1) | (0 << COM2A0) | (1 << COM2B1) | (0 << COM2B0) | (1 << WGM21) | (1 << WGM20);			//Timer 2 PWM
  8e:	83 ea       	ldi	r24, 0xA3	; 163
  90:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B = (1 << WGM22) | (1 << CS22) | (1 << CS21) | (0 << CS20);
  94:	8e e0       	ldi	r24, 0x0E	; 14
  96:	80 93 b1 00 	sts	0x00B1, r24
	OCR2A = 124;
  9a:	8c e7       	ldi	r24, 0x7C	; 124
  9c:	80 93 b3 00 	sts	0x00B3, r24
  a0:	08 95       	ret

000000a2 <Delay1s>:
}

void Delay1s(void)
{
	OCR1AH = 0x3D;
  a2:	8d e3       	ldi	r24, 0x3D	; 61
  a4:	80 93 89 00 	sts	0x0089, r24
	OCR1AL = 0x08;
  a8:	88 e0       	ldi	r24, 0x08	; 8
  aa:	80 93 88 00 	sts	0x0088, r24
	TCCR1B = 0x0D;
  ae:	8d e0       	ldi	r24, 0x0D	; 13
  b0:	80 93 81 00 	sts	0x0081, r24
	while((TIFR1 & (1<<OCF1A)) == 0);
  b4:	b1 9b       	sbis	0x16, 1	; 22
  b6:	fe cf       	rjmp	.-4      	; 0xb4 <Delay1s+0x12>
	TCCR1B = 0;
  b8:	10 92 81 00 	sts	0x0081, r1
	TIFR1 &= (1<<OCF1A);
  bc:	86 b3       	in	r24, 0x16	; 22
  be:	82 70       	andi	r24, 0x02	; 2
  c0:	86 bb       	out	0x16, r24	; 22
  c2:	08 95       	ret

000000c4 <main>:
}

int main(void)
{	
	DDRC = 0;
  c4:	17 b8       	out	0x07, r1	; 7
	DDRD = 0xFF;
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF;
  ca:	84 b9       	out	0x04, r24	; 4
	
	Timer0init();
  cc:	0e 94 40 00 	call	0x80	; 0x80 <Timer0init>
	Timer2init();
  d0:	0e 94 47 00 	call	0x8e	; 0x8e <Timer2init>
	
	OCR1B = 0;			//25 for 20%
  d4:	10 92 8b 00 	sts	0x008B, r1
  d8:	10 92 8a 00 	sts	0x008A, r1
	OCR2B = 99;			//99 for 80%
  dc:	83 e6       	ldi	r24, 0x63	; 99
  de:	80 93 b4 00 	sts	0x00B4, r24
	
    while(1)
	{
		Delay1s();
		OCR0B = 25;		
  e2:	09 e1       	ldi	r16, 0x19	; 25
		OCR2B = 0;	
  e4:	c4 eb       	ldi	r28, 0xB4	; 180
  e6:	d0 e0       	ldi	r29, 0x00	; 0
		Delay1s();
		OCR0B = 0;
		OCR2B = 99;	
  e8:	13 e6       	ldi	r17, 0x63	; 99
	OCR1B = 0;			//25 for 20%
	OCR2B = 99;			//99 for 80%
	
    while(1)
	{
		Delay1s();
  ea:	0e 94 51 00 	call	0xa2	; 0xa2 <Delay1s>
		OCR0B = 25;		
  ee:	08 bd       	out	0x28, r16	; 40
		OCR2B = 0;	
  f0:	18 82       	st	Y, r1
		Delay1s();
  f2:	0e 94 51 00 	call	0xa2	; 0xa2 <Delay1s>
		OCR0B = 0;
  f6:	18 bc       	out	0x28, r1	; 40
		OCR2B = 99;	
  f8:	18 83       	st	Y, r17
  fa:	f7 cf       	rjmp	.-18     	; 0xea <main+0x26>

000000fc <_exit>:
  fc:	f8 94       	cli

000000fe <__stop_program>:
  fe:	ff cf       	rjmp	.-2      	; 0xfe <__stop_program>
