
Lab-1-Section-G.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000021a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800100  00800100  0000028e  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  0000028e  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000040  00000000  00000000  000002be  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000013e  00000000  00000000  000002fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000b2  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000129  00000000  00000000  000004ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000088  00000000  00000000  00000618  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000019b  00000000  00000000  000006a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000070  00000000  00000000  0000083b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000030  00000000  00000000  000008ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  88:	0c 94 0b 01 	jmp	0x216	; 0x216 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <Timer0init>:
unsigned char A2 = 0;
unsigned int state = 0;

void Timer0init(void)
{
	TCCR0A = (1 << COM0A1) | (0 << COM0A0) | (1 << COM0B1) | (0 << COM0B0) | (1 << WGM01) | (1 << WGM00);			//Timer 0 PWM
  90:	83 ea       	ldi	r24, 0xA3	; 163
  92:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1 << WGM02) | (1 << CS02) | (0 << CS01) | (0 << CS00);
  94:	8c e0       	ldi	r24, 0x0C	; 12
  96:	85 bd       	out	0x25, r24	; 37
	OCR0A = 124;
  98:	8c e7       	ldi	r24, 0x7C	; 124
  9a:	87 bd       	out	0x27, r24	; 39
  9c:	08 95       	ret

0000009e <Timer1init>:
}

void Timer1init(void)
{
	TCCR1A = (1 << COM1A1) | (0 << COM1A0) | (1 << COM1B1) | (0 << COM1B0) | (1 << WGM11) | (1 << WGM10);			//Timer 1 PWM
  9e:	83 ea       	ldi	r24, 0xA3	; 163
  a0:	80 93 80 00 	sts	0x0080, r24
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (0 << CS12) | (1 << CS11) | (1 << CS10);
  a4:	8b e1       	ldi	r24, 0x1B	; 27
  a6:	80 93 81 00 	sts	0x0081, r24
	OCR1A = 0x01F3;
  aa:	83 ef       	ldi	r24, 0xF3	; 243
  ac:	91 e0       	ldi	r25, 0x01	; 1
  ae:	90 93 89 00 	sts	0x0089, r25
  b2:	80 93 88 00 	sts	0x0088, r24
  b6:	08 95       	ret

000000b8 <Timer2init>:
}

void Timer2init(void)
{
	TCCR2A = (1 << COM2A1) | (0 << COM2A0) | (1 << COM2B1) | (0 << COM2B0) | (1 << WGM21) | (1 << WGM20);			//Timer 2 PWM
  b8:	83 ea       	ldi	r24, 0xA3	; 163
  ba:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B = (1 << WGM22) | (1 << CS22) | (1 << CS21) | (0 << CS20);
  be:	8e e0       	ldi	r24, 0x0E	; 14
  c0:	80 93 b1 00 	sts	0x00B1, r24
	OCR2A = 124;
  c4:	8c e7       	ldi	r24, 0x7C	; 124
  c6:	80 93 b3 00 	sts	0x00B3, r24
  ca:	08 95       	ret

000000cc <main>:
}

int main(void)
{	
	DDRC = 0;
  cc:	17 b8       	out	0x07, r1	; 7
	DDRD = 0xFF;
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF;
  d2:	84 b9       	out	0x04, r24	; 4
	sei();
  d4:	78 94       	sei
	
	Timer0init();
  d6:	0e 94 48 00 	call	0x90	; 0x90 <Timer0init>
	Timer1init();
  da:	0e 94 4f 00 	call	0x9e	; 0x9e <Timer1init>
	Timer2init();
  de:	0e 94 5c 00 	call	0xb8	; 0xb8 <Timer2init>
	
	ADCSRA = 0x8F;																							
  e2:	ea e7       	ldi	r30, 0x7A	; 122
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	8f e8       	ldi	r24, 0x8F	; 143
  e8:	80 83       	st	Z, r24
	ADMUX = 0xC0;																									//ADC for Timer 0 LED
  ea:	80 ec       	ldi	r24, 0xC0	; 192
  ec:	80 93 7c 00 	sts	0x007C, r24
	
	OCR0B = 0;
  f0:	18 bc       	out	0x28, r1	; 40
	OCR1B = 0;
  f2:	10 92 8b 00 	sts	0x008B, r1
  f6:	10 92 8a 00 	sts	0x008A, r1
	OCR2B = 0;
  fa:	10 92 b4 00 	sts	0x00B4, r1
	
	ADCSRA |= (1<<ADSC);																							//Start
  fe:	80 81       	ld	r24, Z
 100:	80 64       	ori	r24, 0x40	; 64
 102:	80 83       	st	Z, r24
 104:	ff cf       	rjmp	.-2      	; 0x104 <main+0x38>

00000106 <__vector_21>:
    while(1);
	return 0;
}

ISR(ADC_vect)
{
 106:	1f 92       	push	r1
 108:	0f 92       	push	r0
 10a:	0f b6       	in	r0, 0x3f	; 63
 10c:	0f 92       	push	r0
 10e:	11 24       	eor	r1, r1
 110:	2f 93       	push	r18
 112:	8f 93       	push	r24
 114:	9f 93       	push	r25
 116:	ef 93       	push	r30
 118:	ff 93       	push	r31
	state++;
 11a:	80 91 00 01 	lds	r24, 0x0100
 11e:	90 91 01 01 	lds	r25, 0x0101
 122:	01 96       	adiw	r24, 0x01	; 1
 124:	90 93 01 01 	sts	0x0101, r25
 128:	80 93 00 01 	sts	0x0100, r24
	A1 = ADCL;																										//Need to read both register
 12c:	20 91 78 00 	lds	r18, 0x0078
 130:	20 93 03 01 	sts	0x0103, r18
	A2 = ADCH;
 134:	20 91 79 00 	lds	r18, 0x0079
 138:	20 93 02 01 	sts	0x0102, r18
	
	switch(state)
 13c:	82 30       	cpi	r24, 0x02	; 2
 13e:	91 05       	cpc	r25, r1
 140:	e9 f0       	breq	.+58     	; 0x17c <__vector_21+0x76>
 142:	83 30       	cpi	r24, 0x03	; 3
 144:	91 05       	cpc	r25, r1
 146:	c1 f1       	breq	.+112    	; 0x1b8 <__vector_21+0xb2>
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	09 f0       	breq	.+2      	; 0x14e <__vector_21+0x48>
 14c:	55 c0       	rjmp	.+170    	; 0x1f8 <__vector_21+0xf2>
	{
		case 1:
			if(A1 > 250)																							//Adjust the duty cycle based on the ADC input
 14e:	80 91 03 01 	lds	r24, 0x0103
 152:	8b 3f       	cpi	r24, 0xFB	; 251
 154:	50 f0       	brcs	.+20     	; 0x16a <__vector_21+0x64>
			{
				OCR0B = 124;
 156:	8c e7       	ldi	r24, 0x7C	; 124
 158:	88 bd       	out	0x28, r24	; 40
				A1 = 0;
 15a:	10 92 03 01 	sts	0x0103, r1
				A2 = 0;
 15e:	10 92 02 01 	sts	0x0102, r1
				ADMUX = 0xC1;																						//ADC for Timer 1 LED
 162:	81 ec       	ldi	r24, 0xC1	; 193
 164:	80 93 7c 00 	sts	0x007C, r24
 168:	47 c0       	rjmp	.+142    	; 0x1f8 <__vector_21+0xf2>
			}
			else
			{
				OCR0B = 0;
 16a:	18 bc       	out	0x28, r1	; 40
				A1 = 0;
 16c:	10 92 03 01 	sts	0x0103, r1
				A2 = 0;
 170:	10 92 02 01 	sts	0x0102, r1
				ADMUX = 0xC1;
 174:	81 ec       	ldi	r24, 0xC1	; 193
 176:	80 93 7c 00 	sts	0x007C, r24
 17a:	3e c0       	rjmp	.+124    	; 0x1f8 <__vector_21+0xf2>
			}
			break;
		
		case 2:
			if(A1 > 250)																							//Adjust the duty cycle based on the ADC input
 17c:	80 91 03 01 	lds	r24, 0x0103
 180:	8b 3f       	cpi	r24, 0xFB	; 251
 182:	70 f0       	brcs	.+28     	; 0x1a0 <__vector_21+0x9a>
			{
				OCR1B = 0x01F3;
 184:	83 ef       	ldi	r24, 0xF3	; 243
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	90 93 8b 00 	sts	0x008B, r25
 18c:	80 93 8a 00 	sts	0x008A, r24
				A1 = 0;
 190:	10 92 03 01 	sts	0x0103, r1
				A2 = 0;
 194:	10 92 02 01 	sts	0x0102, r1
				ADMUX = 0xC2;																						//ADC for Timer 2 LED
 198:	82 ec       	ldi	r24, 0xC2	; 194
 19a:	80 93 7c 00 	sts	0x007C, r24
 19e:	2c c0       	rjmp	.+88     	; 0x1f8 <__vector_21+0xf2>
			}
			else
			{
				OCR1B = 0;
 1a0:	10 92 8b 00 	sts	0x008B, r1
 1a4:	10 92 8a 00 	sts	0x008A, r1
				A1 = 0;
 1a8:	10 92 03 01 	sts	0x0103, r1
				A2 = 0;
 1ac:	10 92 02 01 	sts	0x0102, r1
				ADMUX = 0xC2;
 1b0:	82 ec       	ldi	r24, 0xC2	; 194
 1b2:	80 93 7c 00 	sts	0x007C, r24
 1b6:	20 c0       	rjmp	.+64     	; 0x1f8 <__vector_21+0xf2>
			}
			break;
			
		case 3:
			if(A1 > 250)																							//Adjust the duty cycle based on the ADC input
 1b8:	80 91 03 01 	lds	r24, 0x0103
 1bc:	8b 3f       	cpi	r24, 0xFB	; 251
 1be:	78 f0       	brcs	.+30     	; 0x1de <__vector_21+0xd8>
			{
				OCR2B = 124;
 1c0:	8c e7       	ldi	r24, 0x7C	; 124
 1c2:	80 93 b4 00 	sts	0x00B4, r24
				A1 = 0;
 1c6:	10 92 03 01 	sts	0x0103, r1
				A2 = 0;
 1ca:	10 92 02 01 	sts	0x0102, r1
				ADMUX = 0xC0;
 1ce:	80 ec       	ldi	r24, 0xC0	; 192
 1d0:	80 93 7c 00 	sts	0x007C, r24
				state = 0;																							//ADC for Timer 0 LED
 1d4:	10 92 01 01 	sts	0x0101, r1
 1d8:	10 92 00 01 	sts	0x0100, r1
 1dc:	0d c0       	rjmp	.+26     	; 0x1f8 <__vector_21+0xf2>
			}
			else
			{
				OCR2B = 0;
 1de:	10 92 b4 00 	sts	0x00B4, r1
				A1 = 0;
 1e2:	10 92 03 01 	sts	0x0103, r1
				A2 = 0;
 1e6:	10 92 02 01 	sts	0x0102, r1
				ADMUX = 0xC0;
 1ea:	80 ec       	ldi	r24, 0xC0	; 192
 1ec:	80 93 7c 00 	sts	0x007C, r24
				state = 0;
 1f0:	10 92 01 01 	sts	0x0101, r1
 1f4:	10 92 00 01 	sts	0x0100, r1
			}
			break;
	}
	
	ADCSRA |= (1<<ADSC);
 1f8:	ea e7       	ldi	r30, 0x7A	; 122
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	80 81       	ld	r24, Z
 1fe:	80 64       	ori	r24, 0x40	; 64
 200:	80 83       	st	Z, r24
}
 202:	ff 91       	pop	r31
 204:	ef 91       	pop	r30
 206:	9f 91       	pop	r25
 208:	8f 91       	pop	r24
 20a:	2f 91       	pop	r18
 20c:	0f 90       	pop	r0
 20e:	0f be       	out	0x3f, r0	; 63
 210:	0f 90       	pop	r0
 212:	1f 90       	pop	r1
 214:	18 95       	reti

00000216 <_exit>:
 216:	f8 94       	cli

00000218 <__stop_program>:
 218:	ff cf       	rjmp	.-2      	; 0x218 <__stop_program>
