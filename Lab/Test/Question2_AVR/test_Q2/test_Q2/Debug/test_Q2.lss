
test_Q2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000019a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800100  00800100  0000020e  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  0000020e  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000040  00000000  00000000  0000023e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001e2  00000000  00000000  0000027e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000e5  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000112  00000000  00000000  00000545  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000ac  00000000  00000000  00000658  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000156  00000000  00000000  00000704  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000cb  00000000  00000000  0000085a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000030  00000000  00000000  00000925  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 6e 00 	call	0xdc	; 0xdc <main>
  88:	0c 94 cb 00 	jmp	0x196	; 0x196 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <usart_init>:
unsigned char A1 = 0;
unsigned char A2 = 0;

void usart_init(void)
{
	UCSR0B = (1<<TXEN0)|(1<<RXEN0);
  90:	88 e1       	ldi	r24, 0x18	; 24
  92:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
  96:	86 e0       	ldi	r24, 0x06	; 6
  98:	80 93 c2 00 	sts	0x00C2, r24
	UBRR0 = 0x67;
  9c:	87 e6       	ldi	r24, 0x67	; 103
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	90 93 c5 00 	sts	0x00C5, r25
  a4:	80 93 c4 00 	sts	0x00C4, r24
  a8:	08 95       	ret

000000aa <usart_send>:
}

void usart_send(unsigned char ch)
{
	while(!(UCSR0A & (1<<UDRE0)));
  aa:	e0 ec       	ldi	r30, 0xC0	; 192
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	90 81       	ld	r25, Z
  b0:	95 ff       	sbrs	r25, 5
  b2:	fd cf       	rjmp	.-6      	; 0xae <usart_send+0x4>
	UDR0 = ch;
  b4:	80 93 c6 00 	sts	0x00C6, r24
  b8:	08 95       	ret

000000ba <Delay1s>:
}

void Delay1s(void)
{
	OCR1AH = 0x3D;
  ba:	8d e3       	ldi	r24, 0x3D	; 61
  bc:	80 93 89 00 	sts	0x0089, r24
	OCR1AL = 0x08;
  c0:	88 e0       	ldi	r24, 0x08	; 8
  c2:	80 93 88 00 	sts	0x0088, r24
	TCCR1B = 0x0D;
  c6:	8d e0       	ldi	r24, 0x0D	; 13
  c8:	80 93 81 00 	sts	0x0081, r24
	while((TIFR1 & (1<<OCF1A)) == 0);
  cc:	b1 9b       	sbis	0x16, 1	; 22
  ce:	fe cf       	rjmp	.-4      	; 0xcc <Delay1s+0x12>
	TCCR1B = 0;
  d0:	10 92 81 00 	sts	0x0081, r1
	TIFR1 &= (1<<OCF1A);
  d4:	86 b3       	in	r24, 0x16	; 22
  d6:	82 70       	andi	r24, 0x02	; 2
  d8:	86 bb       	out	0x16, r24	; 22
  da:	08 95       	ret

000000dc <main>:
}

int main(void)
{	
	DDRC = 0;
  dc:	17 b8       	out	0x07, r1	; 7
	sei();
  de:	78 94       	sei
	usart_init();
  e0:	0e 94 48 00 	call	0x90	; 0x90 <usart_init>
	
	ADCSRA = 0x8F;
  e4:	ea e7       	ldi	r30, 0x7A	; 122
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	8f e8       	ldi	r24, 0x8F	; 143
  ea:	80 83       	st	Z, r24
	ADMUX = 0xC0;																									//ADC reading A0
  ec:	80 ec       	ldi	r24, 0xC0	; 192
  ee:	80 93 7c 00 	sts	0x007C, r24
	
	ADCSRA |= (1<<ADSC);																							//Start
  f2:	80 81       	ld	r24, Z
  f4:	80 64       	ori	r24, 0x40	; 64
  f6:	80 83       	st	Z, r24
  f8:	ff cf       	rjmp	.-2      	; 0xf8 <main+0x1c>

000000fa <__vector_21>:
	while(1);
	return 0;
}

ISR(ADC_vect)
{	
  fa:	1f 92       	push	r1
  fc:	0f 92       	push	r0
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	0f 92       	push	r0
 102:	11 24       	eor	r1, r1
 104:	2f 93       	push	r18
 106:	3f 93       	push	r19
 108:	4f 93       	push	r20
 10a:	5f 93       	push	r21
 10c:	6f 93       	push	r22
 10e:	7f 93       	push	r23
 110:	8f 93       	push	r24
 112:	9f 93       	push	r25
 114:	af 93       	push	r26
 116:	bf 93       	push	r27
 118:	ef 93       	push	r30
 11a:	ff 93       	push	r31
	
	A1 = ADCL;																										//Need to read both register
 11c:	80 91 78 00 	lds	r24, 0x0078
 120:	80 93 01 01 	sts	0x0101, r24
	A2 = ADCH;
 124:	90 91 79 00 	lds	r25, 0x0079
 128:	90 93 00 01 	sts	0x0100, r25
	
	if(A1 > 250)
 12c:	8b 3f       	cpi	r24, 0xFB	; 251
 12e:	78 f0       	brcs	.+30     	; 0x14e <__vector_21+0x54>
	{
		usart_send('B');
 130:	82 e4       	ldi	r24, 0x42	; 66
 132:	0e 94 55 00 	call	0xaa	; 0xaa <usart_send>
		usart_send('b');
 136:	82 e6       	ldi	r24, 0x62	; 98
 138:	0e 94 55 00 	call	0xaa	; 0xaa <usart_send>
		usart_send('B');
 13c:	82 e4       	ldi	r24, 0x42	; 66
 13e:	0e 94 55 00 	call	0xaa	; 0xaa <usart_send>
		usart_send('b');
 142:	82 e6       	ldi	r24, 0x62	; 98
 144:	0e 94 55 00 	call	0xaa	; 0xaa <usart_send>
		Delay1s();	
 148:	0e 94 5d 00 	call	0xba	; 0xba <Delay1s>
 14c:	0e c0       	rjmp	.+28     	; 0x16a <__vector_21+0x70>
	}
	else
	{
		usart_send('Y');
 14e:	89 e5       	ldi	r24, 0x59	; 89
 150:	0e 94 55 00 	call	0xaa	; 0xaa <usart_send>
		usart_send('y');
 154:	89 e7       	ldi	r24, 0x79	; 121
 156:	0e 94 55 00 	call	0xaa	; 0xaa <usart_send>
		usart_send('Y');
 15a:	89 e5       	ldi	r24, 0x59	; 89
 15c:	0e 94 55 00 	call	0xaa	; 0xaa <usart_send>
		usart_send('y');
 160:	89 e7       	ldi	r24, 0x79	; 121
 162:	0e 94 55 00 	call	0xaa	; 0xaa <usart_send>
		Delay1s();
 166:	0e 94 5d 00 	call	0xba	; 0xba <Delay1s>
	}
	
	ADCSRA |= (1<<ADSC);
 16a:	ea e7       	ldi	r30, 0x7A	; 122
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	80 64       	ori	r24, 0x40	; 64
 172:	80 83       	st	Z, r24
 174:	ff 91       	pop	r31
 176:	ef 91       	pop	r30
 178:	bf 91       	pop	r27
 17a:	af 91       	pop	r26
 17c:	9f 91       	pop	r25
 17e:	8f 91       	pop	r24
 180:	7f 91       	pop	r23
 182:	6f 91       	pop	r22
 184:	5f 91       	pop	r21
 186:	4f 91       	pop	r20
 188:	3f 91       	pop	r19
 18a:	2f 91       	pop	r18
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <_exit>:
 196:	f8 94       	cli

00000198 <__stop_program>:
 198:	ff cf       	rjmp	.-2      	; 0x198 <__stop_program>
